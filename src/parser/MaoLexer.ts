// Generated from grammars/MaoLexer.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class MaoLexer extends Lexer {
	public static readonly INT = 1;
	public static readonly DOUBLE = 2;
	public static readonly PLUS = 3;
	public static readonly MINUS = 4;
	public static readonly MULT = 5;
	public static readonly DIV = 6;
	public static readonly EQUALS = 7;
	public static readonly LPAREN = 8;
	public static readonly RPAREN = 9;
	public static readonly SEMI = 10;
	public static readonly INT_LITERAL = 11;
	public static readonly DOUBLE_LITERAL = 12;
	public static readonly IDENTIFIER = 13;
	public static readonly PRINT = 14;
	public static readonly WS = 15;
	public static readonly COMMENT = 16;
	public static readonly TERMINATOR = 17;
	public static readonly LINE_COMMENT = 18;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"INT", "DOUBLE", "PLUS", "MINUS", "MULT", "DIV", "EQUALS", "LPAREN", "RPAREN", 
		"SEMI", "INT_LITERAL", "DOUBLE_LITERAL", "IDENTIFIER", "PRINT", "WS", 
		"COMMENT", "TERMINATOR", "LINE_COMMENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'int'", "'double'", "'+'", "'-'", "'*'", "'/'", "'='", "'('", 
		"')'", "';'", undefined, undefined, undefined, "'print'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INT", "DOUBLE", "PLUS", "MINUS", "MULT", "DIV", "EQUALS", 
		"LPAREN", "RPAREN", "SEMI", "INT_LITERAL", "DOUBLE_LITERAL", "IDENTIFIER", 
		"PRINT", "WS", "COMMENT", "TERMINATOR", "LINE_COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(MaoLexer._LITERAL_NAMES, MaoLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return MaoLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(MaoLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "MaoLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return MaoLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return MaoLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return MaoLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return MaoLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x14\x8A\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v" +
		"\x03\v\x03\f\x06\fD\n\f\r\f\x0E\fE\x03\r\x06\rI\n\r\r\r\x0E\rJ\x03\r\x03" +
		"\r\x06\rO\n\r\r\r\x0E\rP\x03\x0E\x06\x0ET\n\x0E\r\x0E\x0E\x0EU\x03\x0E" +
		"\x07\x0EY\n\x0E\f\x0E\x0E\x0E\\\v\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x10\x06\x10e\n\x10\r\x10\x0E\x10f\x03\x10\x03\x10" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x07\x11o\n\x11\f\x11\x0E\x11r\v\x11\x03" +
		"\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x06\x12z\n\x12\r\x12\x0E" +
		"\x12{\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x07\x13\x84\n\x13" +
		"\f\x13\x0E\x13\x87\v\x13\x03\x13\x03\x13\x03p\x02\x02\x14\x03\x02\x03" +
		"\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02" +
		"\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F" +
		"\x02\x11!\x02\x12#\x02\x13%\x02\x14\x03\x02\x07\x03\x022;\x04\x02C\\c" +
		"|\x05\x022;C\\c|\x04\x02\v\v\"\"\x04\x02\f\f\x0F\x0F\x02\x92\x02\x03\x03" +
		"\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03" +
		"\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02" +
		"\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02" +
		"\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02" +
		"\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02" +
		"\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x03\'\x03\x02\x02\x02" +
		"\x05+\x03\x02\x02\x02\x072\x03\x02\x02\x02\t4\x03\x02\x02\x02\v6\x03\x02" +
		"\x02\x02\r8\x03\x02\x02\x02\x0F:\x03\x02\x02\x02\x11<\x03\x02\x02\x02" +
		"\x13>\x03\x02\x02\x02\x15@\x03\x02\x02\x02\x17C\x03\x02\x02\x02\x19H\x03" +
		"\x02\x02\x02\x1BS\x03\x02\x02\x02\x1D]\x03\x02\x02\x02\x1Fd\x03\x02\x02" +
		"\x02!j\x03\x02\x02\x02#y\x03\x02\x02\x02%\x7F\x03\x02\x02\x02\'(\x07k" +
		"\x02\x02()\x07p\x02\x02)*\x07v\x02\x02*\x04\x03\x02\x02\x02+,\x07f\x02" +
		"\x02,-\x07q\x02\x02-.\x07w\x02\x02./\x07d\x02\x02/0\x07n\x02\x0201\x07" +
		"g\x02\x021\x06\x03\x02\x02\x0223\x07-\x02\x023\b\x03\x02\x02\x0245\x07" +
		"/\x02\x025\n\x03\x02\x02\x0267\x07,\x02\x027\f\x03\x02\x02\x0289\x071" +
		"\x02\x029\x0E\x03\x02\x02\x02:;\x07?\x02\x02;\x10\x03\x02\x02\x02<=\x07" +
		"*\x02\x02=\x12\x03\x02\x02\x02>?\x07+\x02\x02?\x14\x03\x02\x02\x02@A\x07" +
		"=\x02\x02A\x16\x03\x02\x02\x02BD\t\x02\x02\x02CB\x03\x02\x02\x02DE\x03" +
		"\x02\x02\x02EC\x03\x02\x02\x02EF\x03\x02\x02\x02F\x18\x03\x02\x02\x02" +
		"GI\t\x02\x02\x02HG\x03\x02\x02\x02IJ\x03\x02\x02\x02JH\x03\x02\x02\x02" +
		"JK\x03\x02\x02\x02KL\x03\x02\x02\x02LN\x070\x02\x02MO\t\x02\x02\x02NM" +
		"\x03\x02\x02\x02OP\x03\x02\x02\x02PN\x03\x02\x02\x02PQ\x03\x02\x02\x02" +
		"Q\x1A\x03\x02\x02\x02RT\t\x03\x02\x02SR\x03\x02\x02\x02TU\x03\x02\x02" +
		"\x02US\x03\x02\x02\x02UV\x03\x02\x02\x02VZ\x03\x02\x02\x02WY\t\x04\x02" +
		"\x02XW\x03\x02\x02\x02Y\\\x03\x02\x02\x02ZX\x03\x02\x02\x02Z[\x03\x02" +
		"\x02\x02[\x1C\x03\x02\x02\x02\\Z\x03\x02\x02\x02]^\x07r\x02\x02^_\x07" +
		"t\x02\x02_`\x07k\x02\x02`a\x07p\x02\x02ab\x07v\x02\x02b\x1E\x03\x02\x02" +
		"\x02ce\t\x05\x02\x02dc\x03\x02\x02\x02ef\x03\x02\x02\x02fd\x03\x02\x02" +
		"\x02fg\x03\x02\x02\x02gh\x03\x02\x02\x02hi\b\x10\x02\x02i \x03\x02\x02" +
		"\x02jk\x071\x02\x02kl\x07,\x02\x02lp\x03\x02\x02\x02mo\v\x02\x02\x02n" +
		"m\x03\x02\x02\x02or\x03\x02\x02\x02pq\x03\x02\x02\x02pn\x03\x02\x02\x02" +
		"qs\x03\x02\x02\x02rp\x03\x02\x02\x02st\x07,\x02\x02tu\x071\x02\x02uv\x03" +
		"\x02\x02\x02vw\b\x11\x02\x02w\"\x03\x02\x02\x02xz\t\x06\x02\x02yx\x03" +
		"\x02\x02\x02z{\x03\x02\x02\x02{y\x03\x02\x02\x02{|\x03\x02\x02\x02|}\x03" +
		"\x02\x02\x02}~\b\x12\x02\x02~$\x03\x02\x02\x02\x7F\x80\x071\x02\x02\x80" +
		"\x81\x071\x02\x02\x81\x85\x03\x02\x02\x02\x82\x84\n\x06\x02\x02\x83\x82" +
		"\x03\x02\x02\x02\x84\x87\x03\x02\x02\x02\x85\x83\x03\x02\x02\x02\x85\x86" +
		"\x03\x02\x02\x02\x86\x88\x03\x02\x02\x02\x87\x85\x03\x02\x02\x02\x88\x89" +
		"\b\x13\x02\x02\x89&\x03\x02\x02\x02\f\x02EJPUZfp{\x85\x03\x02\x03\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MaoLexer.__ATN) {
			MaoLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(MaoLexer._serializedATN));
		}

		return MaoLexer.__ATN;
	}

}

